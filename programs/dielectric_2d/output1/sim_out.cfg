# The minimum number of time steps per gyration:
boris_steps_per_period =  3.0000E+01

# The number of grid cells per coordinate in a box:
box_size = 8

# CFL number for particles:
cfl_particles =  5.0000E-01

# Whether cylindrical coordinates are used (only in 2D):
cylindrical = F

# The length of the domain (m):
domain_len =  1.4000E-03  2.0000E-03

# Estimate of mobility for dielectric relaxation time:
drt_mobility =  7.5000E-02

# The maximum timestep (s):
dt_max =  1.0000E-10

# The minimum timestep (s):
dt_min =  1.0000E-14

# The timestep for writing output (s):
dt_output =  1.0000E-10

# The desired endtime (s) of the simulation:
end_time =  5.0000E-08

[field]
    # The applied electric field (V/m) (vertical):
    amplitude =  4.0000E+06

    # Type of boundary condition to use (homogeneous, ...):
    bc_type = 'homogeneous'

    # Decay time of field (s):
    decay_time =  1.7977+308

    # Potential stays constant up to this radius:
    dropoff_radius =  1.0000E-03

    # Relative width over which the potential drops:
    dropoff_relwidth =  5.0000E-01

    # Linear derivative of field [V/(ms)]:
    lin_deriv =  0.0000E+00

    # Modify electric field after this time (s):
    mod_t0 =  1.0000E+99

    # Amplitude of sinusoidal modification (V/m):
    sin_amplitude =  0.0000E+00

    # Frequency of sinusoidal modification (Hz):
    sin_freq =  0.0000E+00

[gas]
    # The names of the gases used in the simulation:
    components = 'N2' 'O2'

    # The file in which to find cross section data:
    file = '../../input/cs_example.txt'

    # Fraction of O2, used for photoionization:
    frac_O2 =  2.0000E-01

    # The partial pressure of the gases (as if they were ideal gases):
    fractions =  8.0000E-01  2.0000E-01

    # The name of the gas mixture used:
    name = 'AIR'

    # The gas pressure (bar), used for photoionization:
    pressure =  2.0000E-01

    # The gas temperature (Kelvin):
    temperature =  3.0000E+02

    # Input file with transport data:
    transport_data_file = '../../input/transport_data_air_1bar.txt'

# The maximum electric field in the fluid model coefficients:
lookup_table_max_efield =  3.0000E+07

# The transport data table size in the fluid model:
lookup_table_size = 500

# Number of V-cycles to perform per time step:
multigrid_num_vcycles = 2

# Directory where the output should be written:
output_dir = 'output'

[particle]
    # The size of the lookup table for the collision rates:
    lkptbl_size = 1000

    # The maximum energy in eV for particles in the simulation:
    max_energy_ev =  5.0000E+02

    # Maximum number of particles:
    max_number = 15000000

    # Maximum weight for simulation particles:
    max_weight =  1.0000E+20

    # Minimum increase in particle count before merging:
    min_merge_increase =  1.2500E+00

    # Minimum weight for simulation particles:
    min_weight =  1.0000E+05

    # Desired number of particles per cell:
    per_cell =  1.0000E+02

# Print status every this many seconds:
print_status_sec =  6.0000E+01

[refine]
    # Refine if alpha*dx is larger than this value:
    adx =  1.0000E+00

    # The refinement buffer width in cells (around flagged cells):
    buffer_width = 2

    # Only derefine if grid spacing if smaller than this value:
    derefine_dx =  1.0000E-06

    # Only refine if electron density is above this value:
    elec_dens =  1.0000E+13

    # The grid spacing will always be smaller than this value:
    max_dx =  2.0000E-05

    # The grid spacing will always be larger than this value:
    min_dx =  2.0000E-06

    # The number of steps after which the mesh is updated:
    per_steps = 10

    # Refine regions up to this grid spacing:
    regions_dr =  1.0000E+99

    # Maximum coordinate of the refinement regions:
    regions_rmax =  0.0000E+00  0.0000E+00

    # Minimum coordinate of the refinement regions:
    regions_rmin =  0.0000E+00  0.0000E+00

    # Refine regions up to this simulation time:
    regions_tstop = -1.0000E+99

# The name of the simulation:
simulation_name = 'sim'

# The name of the eff. ionization coeff.:
td_alpha_name = 'efield[V/m]_vs_alpha[1/m]'

# Whether a dielectric is used:
use_dielectric = T

